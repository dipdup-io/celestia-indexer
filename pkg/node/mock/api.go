// Code generated by MockGen. DO NOT EDIT.
// Source: api.go
//
// Generated by this command:
//
//	mockgen -source=api.go -destination=mock/api.go -package=mock -typed
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	types "github.com/dipdup-io/celestia-indexer/pkg/node/types"
	types0 "github.com/dipdup-io/celestia-indexer/pkg/types"
	gomock "go.uber.org/mock/gomock"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// Block mocks base method.
func (m *MockAPI) Block(ctx context.Context, level types0.Level) (types0.ResultBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Block", ctx, level)
	ret0, _ := ret[0].(types0.ResultBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Block indicates an expected call of Block.
func (mr *MockAPIMockRecorder) Block(ctx, level any) *APIBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Block", reflect.TypeOf((*MockAPI)(nil).Block), ctx, level)
	return &APIBlockCall{Call: call}
}

// APIBlockCall wrap *gomock.Call
type APIBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *APIBlockCall) Return(arg0 types0.ResultBlock, arg1 error) *APIBlockCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *APIBlockCall) Do(f func(context.Context, types0.Level) (types0.ResultBlock, error)) *APIBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *APIBlockCall) DoAndReturn(f func(context.Context, types0.Level) (types0.ResultBlock, error)) *APIBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// BlockResults mocks base method.
func (m *MockAPI) BlockResults(ctx context.Context, level types0.Level) (types0.ResultBlockResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockResults", ctx, level)
	ret0, _ := ret[0].(types0.ResultBlockResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockResults indicates an expected call of BlockResults.
func (mr *MockAPIMockRecorder) BlockResults(ctx, level any) *APIBlockResultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockResults", reflect.TypeOf((*MockAPI)(nil).BlockResults), ctx, level)
	return &APIBlockResultsCall{Call: call}
}

// APIBlockResultsCall wrap *gomock.Call
type APIBlockResultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *APIBlockResultsCall) Return(arg0 types0.ResultBlockResults, arg1 error) *APIBlockResultsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *APIBlockResultsCall) Do(f func(context.Context, types0.Level) (types0.ResultBlockResults, error)) *APIBlockResultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *APIBlockResultsCall) DoAndReturn(f func(context.Context, types0.Level) (types0.ResultBlockResults, error)) *APIBlockResultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Genesis mocks base method.
func (m *MockAPI) Genesis(ctx context.Context) (types.Genesis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Genesis", ctx)
	ret0, _ := ret[0].(types.Genesis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Genesis indicates an expected call of Genesis.
func (mr *MockAPIMockRecorder) Genesis(ctx any) *APIGenesisCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Genesis", reflect.TypeOf((*MockAPI)(nil).Genesis), ctx)
	return &APIGenesisCall{Call: call}
}

// APIGenesisCall wrap *gomock.Call
type APIGenesisCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *APIGenesisCall) Return(arg0 types.Genesis, arg1 error) *APIGenesisCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *APIGenesisCall) Do(f func(context.Context) (types.Genesis, error)) *APIGenesisCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *APIGenesisCall) DoAndReturn(f func(context.Context) (types.Genesis, error)) *APIGenesisCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Head mocks base method.
func (m *MockAPI) Head(ctx context.Context) (types0.ResultBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Head", ctx)
	ret0, _ := ret[0].(types0.ResultBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Head indicates an expected call of Head.
func (mr *MockAPIMockRecorder) Head(ctx any) *APIHeadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockAPI)(nil).Head), ctx)
	return &APIHeadCall{Call: call}
}

// APIHeadCall wrap *gomock.Call
type APIHeadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *APIHeadCall) Return(arg0 types0.ResultBlock, arg1 error) *APIHeadCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *APIHeadCall) Do(f func(context.Context) (types0.ResultBlock, error)) *APIHeadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *APIHeadCall) DoAndReturn(f func(context.Context) (types0.ResultBlock, error)) *APIHeadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Status mocks base method.
func (m *MockAPI) Status(ctx context.Context) (types.Status, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status", ctx)
	ret0, _ := ret[0].(types.Status)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockAPIMockRecorder) Status(ctx any) *APIStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockAPI)(nil).Status), ctx)
	return &APIStatusCall{Call: call}
}

// APIStatusCall wrap *gomock.Call
type APIStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *APIStatusCall) Return(arg0 types.Status, arg1 error) *APIStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *APIStatusCall) Do(f func(context.Context) (types.Status, error)) *APIStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *APIStatusCall) DoAndReturn(f func(context.Context) (types.Status, error)) *APIStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCelestiaNodeApi is a mock of CelestiaNodeApi interface.
type MockCelestiaNodeApi struct {
	ctrl     *gomock.Controller
	recorder *MockCelestiaNodeApiMockRecorder
}

// MockCelestiaNodeApiMockRecorder is the mock recorder for MockCelestiaNodeApi.
type MockCelestiaNodeApiMockRecorder struct {
	mock *MockCelestiaNodeApi
}

// NewMockCelestiaNodeApi creates a new mock instance.
func NewMockCelestiaNodeApi(ctrl *gomock.Controller) *MockCelestiaNodeApi {
	mock := &MockCelestiaNodeApi{ctrl: ctrl}
	mock.recorder = &MockCelestiaNodeApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCelestiaNodeApi) EXPECT() *MockCelestiaNodeApiMockRecorder {
	return m.recorder
}

// Blobs mocks base method.
func (m *MockCelestiaNodeApi) Blobs(ctx context.Context, height uint64, hash ...string) ([]types.Blob, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, height}
	for _, a := range hash {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Blobs", varargs...)
	ret0, _ := ret[0].([]types.Blob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Blobs indicates an expected call of Blobs.
func (mr *MockCelestiaNodeApiMockRecorder) Blobs(ctx, height any, hash ...any) *CelestiaNodeApiBlobsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, height}, hash...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Blobs", reflect.TypeOf((*MockCelestiaNodeApi)(nil).Blobs), varargs...)
	return &CelestiaNodeApiBlobsCall{Call: call}
}

// CelestiaNodeApiBlobsCall wrap *gomock.Call
type CelestiaNodeApiBlobsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CelestiaNodeApiBlobsCall) Return(arg0 []types.Blob, arg1 error) *CelestiaNodeApiBlobsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CelestiaNodeApiBlobsCall) Do(f func(context.Context, uint64, ...string) ([]types.Blob, error)) *CelestiaNodeApiBlobsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CelestiaNodeApiBlobsCall) DoAndReturn(f func(context.Context, uint64, ...string) ([]types.Blob, error)) *CelestiaNodeApiBlobsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
