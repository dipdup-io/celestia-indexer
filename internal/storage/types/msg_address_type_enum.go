// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.7
// Revision: bf63e108589bbd2327b13ec2c5da532aad234029
// Build Date: 2023-07-25T23:27:55Z
// Built By: goreleaser

package types

import (
	"database/sql/driver"
	"errors"
	"fmt"
)

const (
	// MsgAddressTypeValidatorAddress is a MsgAddressType of type validatorAddress.
	MsgAddressTypeValidatorAddress MsgAddressType = "validatorAddress"
	// MsgAddressTypeDelegatorAddress is a MsgAddressType of type delegatorAddress.
	MsgAddressTypeDelegatorAddress MsgAddressType = "delegatorAddress"
	// MsgAddressTypeValidatorSrcAddress is a MsgAddressType of type validatorSrcAddress.
	MsgAddressTypeValidatorSrcAddress MsgAddressType = "validatorSrcAddress"
	// MsgAddressTypeValidatorDstAddress is a MsgAddressType of type validatorDstAddress.
	MsgAddressTypeValidatorDstAddress MsgAddressType = "validatorDstAddress"
	// MsgAddressTypeFromAddress is a MsgAddressType of type fromAddress.
	MsgAddressTypeFromAddress MsgAddressType = "fromAddress"
	// MsgAddressTypeToAddress is a MsgAddressType of type toAddress.
	MsgAddressTypeToAddress MsgAddressType = "toAddress"
	// MsgAddressTypeGrantee is a MsgAddressType of type grantee.
	MsgAddressTypeGrantee MsgAddressType = "grantee"
	// MsgAddressTypeGranter is a MsgAddressType of type granter.
	MsgAddressTypeGranter MsgAddressType = "granter"
	// MsgAddressTypeSigner is a MsgAddressType of type signer.
	MsgAddressTypeSigner MsgAddressType = "signer"
	// MsgAddressTypeWithdraw is a MsgAddressType of type withdraw.
	MsgAddressTypeWithdraw MsgAddressType = "withdraw"
	// MsgAddressTypeVoter is a MsgAddressType of type voter.
	MsgAddressTypeVoter MsgAddressType = "voter"
)

var ErrInvalidMsgAddressType = errors.New("not a valid MsgAddressType")

// MsgAddressTypeValues returns a list of the values for MsgAddressType
func MsgAddressTypeValues() []MsgAddressType {
	return []MsgAddressType{
		MsgAddressTypeValidatorAddress,
		MsgAddressTypeDelegatorAddress,
		MsgAddressTypeValidatorSrcAddress,
		MsgAddressTypeValidatorDstAddress,
		MsgAddressTypeFromAddress,
		MsgAddressTypeToAddress,
		MsgAddressTypeGrantee,
		MsgAddressTypeGranter,
		MsgAddressTypeSigner,
		MsgAddressTypeWithdraw,
		MsgAddressTypeVoter,
	}
}

// String implements the Stringer interface.
func (x MsgAddressType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x MsgAddressType) IsValid() bool {
	_, err := ParseMsgAddressType(string(x))
	return err == nil
}

var _MsgAddressTypeValue = map[string]MsgAddressType{
	"validatorAddress":    MsgAddressTypeValidatorAddress,
	"delegatorAddress":    MsgAddressTypeDelegatorAddress,
	"validatorSrcAddress": MsgAddressTypeValidatorSrcAddress,
	"validatorDstAddress": MsgAddressTypeValidatorDstAddress,
	"fromAddress":         MsgAddressTypeFromAddress,
	"toAddress":           MsgAddressTypeToAddress,
	"grantee":             MsgAddressTypeGrantee,
	"granter":             MsgAddressTypeGranter,
	"signer":              MsgAddressTypeSigner,
	"withdraw":            MsgAddressTypeWithdraw,
	"voter":               MsgAddressTypeVoter,
}

// ParseMsgAddressType attempts to convert a string to a MsgAddressType.
func ParseMsgAddressType(name string) (MsgAddressType, error) {
	if x, ok := _MsgAddressTypeValue[name]; ok {
		return x, nil
	}
	return MsgAddressType(""), fmt.Errorf("%s is %w", name, ErrInvalidMsgAddressType)
}

// MarshalText implements the text marshaller method.
func (x MsgAddressType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *MsgAddressType) UnmarshalText(text []byte) error {
	tmp, err := ParseMsgAddressType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errMsgAddressTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *MsgAddressType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = MsgAddressType("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseMsgAddressType(v)
	case []byte:
		*x, err = ParseMsgAddressType(string(v))
	case MsgAddressType:
		*x = v
	case *MsgAddressType:
		if v == nil {
			return errMsgAddressTypeNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errMsgAddressTypeNilPtr
		}
		*x, err = ParseMsgAddressType(*v)
	default:
		return errors.New("invalid type for MsgAddressType")
	}

	return
}

// Value implements the driver Valuer interface.
func (x MsgAddressType) Value() (driver.Value, error) {
	return x.String(), nil
}
