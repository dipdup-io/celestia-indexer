// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.7
// Revision: bf63e108589bbd2327b13ec2c5da532aad234029
// Build Date: 2023-07-25T23:27:55Z
// Built By: goreleaser

package types

import (
	"database/sql/driver"
	"errors"
	"fmt"
)

const (
	// TxAddressTypeValidatorAddress is a TxAddressType of type validatorAddress.
	TxAddressTypeValidatorAddress TxAddressType = "validatorAddress"
	// TxAddressTypeDelegatorAddress is a TxAddressType of type delegatorAddress.
	TxAddressTypeDelegatorAddress TxAddressType = "delegatorAddress"
	// TxAddressTypeValidatorSrcAddress is a TxAddressType of type validatorSrcAddress.
	TxAddressTypeValidatorSrcAddress TxAddressType = "validatorSrcAddress"
	// TxAddressTypeValidatorDstAddress is a TxAddressType of type validatorDstAddress.
	TxAddressTypeValidatorDstAddress TxAddressType = "validatorDstAddress"
	// TxAddressTypeFromAddress is a TxAddressType of type fromAddress.
	TxAddressTypeFromAddress TxAddressType = "fromAddress"
	// TxAddressTypeToAddress is a TxAddressType of type toAddress.
	TxAddressTypeToAddress TxAddressType = "toAddress"
	// TxAddressTypeGrantee is a TxAddressType of type grantee.
	TxAddressTypeGrantee TxAddressType = "grantee"
	// TxAddressTypeGranter is a TxAddressType of type granter.
	TxAddressTypeGranter TxAddressType = "granter"
	// TxAddressTypeSigner is a TxAddressType of type signer.
	TxAddressTypeSigner TxAddressType = "signer"
	// TxAddressTypeWithdraw is a TxAddressType of type withdraw.
	TxAddressTypeWithdraw TxAddressType = "withdraw"
)

var ErrInvalidTxAddressType = errors.New("not a valid TxAddressType")

// TxAddressTypeValues returns a list of the values for TxAddressType
func TxAddressTypeValues() []TxAddressType {
	return []TxAddressType{
		TxAddressTypeValidatorAddress,
		TxAddressTypeDelegatorAddress,
		TxAddressTypeValidatorSrcAddress,
		TxAddressTypeValidatorDstAddress,
		TxAddressTypeFromAddress,
		TxAddressTypeToAddress,
		TxAddressTypeGrantee,
		TxAddressTypeGranter,
		TxAddressTypeSigner,
		TxAddressTypeWithdraw,
	}
}

// String implements the Stringer interface.
func (x TxAddressType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x TxAddressType) IsValid() bool {
	_, err := ParseTxAddressType(string(x))
	return err == nil
}

var _TxAddressTypeValue = map[string]TxAddressType{
	"validatorAddress":    TxAddressTypeValidatorAddress,
	"delegatorAddress":    TxAddressTypeDelegatorAddress,
	"validatorSrcAddress": TxAddressTypeValidatorSrcAddress,
	"validatorDstAddress": TxAddressTypeValidatorDstAddress,
	"fromAddress":         TxAddressTypeFromAddress,
	"toAddress":           TxAddressTypeToAddress,
	"grantee":             TxAddressTypeGrantee,
	"granter":             TxAddressTypeGranter,
	"signer":              TxAddressTypeSigner,
	"withdraw":            TxAddressTypeWithdraw,
}

// ParseTxAddressType attempts to convert a string to a TxAddressType.
func ParseTxAddressType(name string) (TxAddressType, error) {
	if x, ok := _TxAddressTypeValue[name]; ok {
		return x, nil
	}
	return TxAddressType(""), fmt.Errorf("%s is %w", name, ErrInvalidTxAddressType)
}

// MarshalText implements the text marshaller method.
func (x TxAddressType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *TxAddressType) UnmarshalText(text []byte) error {
	tmp, err := ParseTxAddressType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errTxAddressTypeNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *TxAddressType) Scan(value interface{}) (err error) {
	if value == nil {
		*x = TxAddressType("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseTxAddressType(v)
	case []byte:
		*x, err = ParseTxAddressType(string(v))
	case TxAddressType:
		*x = v
	case *TxAddressType:
		if v == nil {
			return errTxAddressTypeNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errTxAddressTypeNilPtr
		}
		*x, err = ParseTxAddressType(*v)
	default:
		return errors.New("invalid type for TxAddressType")
	}

	return
}

// Value implements the driver Valuer interface.
func (x TxAddressType) Value() (driver.Value, error) {
	return x.String(), nil
}
